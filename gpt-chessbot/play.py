import curses
import random

import chess

from .chessbot import ask_gpt


def EvE(gpt_config):
    def play(scr):
        scr.addstr(0, 1, "~~~ GPT vs GPT ~~~")

        def movefunc(gpt_config, board):
            _print_status(scr, "GPT is thinking...")
            return ask_gpt(gpt_config, board)

        _play(scr, gpt_config, movefunc)

    curses.wrapper(play)


def PvE(gpt_config):
    sides = {
        "white": chess.WHITE,
        "black": chess.BLACK,
    }
    playing_as = random.choice(list(sides.keys()))
    player = sides[playing_as]

    def play(scr):
        scr.addstr(0, 1, "~~~ You vs GPT ~~~" if player == chess.WHITE else "~~~ GPT vs You ~~~")

        def movefunc(gpt_config, board):
            if board.turn == player:
                _print_status(scr, "Enter a move: ")
                move = _handle_user_input(scr)
                _print_status(scr, "")
                return _parse_user_move(move, board)
            else:
                _print_status(scr, "GPT is thinking...")
                return ask_gpt(gpt_config, board)

        _play(scr, gpt_config, movefunc)

    curses.wrapper(play)


def _handle_user_input(scr):
    """
    Generated by GPT-4 lol
    """
    y_offset = 12
    x_offset = 14
    user_input = ""
    while True:
        ch = scr.getch()

        # Break the loop when the Enter key is pressed
        if ch == ord("\n"):
            break
        # Handle backspace
        elif ch == curses.KEY_BACKSPACE:
            if len(user_input) > 0:
                user_input = user_input[:-1]
                scr.addstr(y_offset, x_offset + len(user_input), " ")
                scr.move(y_offset, x_offset + len(user_input))
        # Append the character to the user input string
        else:
            user_input += chr(ch)
            scr.addch(y_offset, x_offset + len(user_input) - 1, ch)
    return user_input


def _parse_user_move(user_move: str, board: chess.Board):
    try:
        return board.parse_san(user_move)
    except:
        return chess.Move.from_uci(user_move)


def _print_board(scr, board):
    offset = 2
    board_lines = str(board).split("\n")
    scr.addstr(offset - 1, 0, "╔" + "═" * (2 + 8 + 7) + "╗")
    for i, line in enumerate(board_lines):
        scr.addstr(offset + i, 0, "║ " + line + " ║")
    scr.addstr(offset + len(board_lines), 0, "╚" + "═" * (2 + 8 + 7) + "╝")


def _print_movelist(scr, movelist):
    offset = 14
    for i, moves in enumerate(movelist):
        scr.addstr(offset + i, 0, f"{i+1}. {' '.join(moves)}")


def _print_status(scr, message):
    offset = 12
    scr.move(offset, 0)
    scr.clrtoeol()
    scr.addstr(offset, 0, message)
    scr.refresh()


def _play(scr, gpt_config, movefunc):
    curses.curs_set(0)

    board = chess.Board()
    movelist = []
    while True:
        _print_board(scr, board)
        _print_movelist(scr, movelist)
        scr.refresh()
        move = movefunc(gpt_config, board)
        if not move:
            print("GPT failed to make a move")
            return

        if board.turn == chess.WHITE:
            movelist.append([board.san(move)])
        else:
            movelist[-1].append(board.san(move))

        board.push(move)
